def generate_history_prompt(own_history, opponent_history, payoff_function, is_ended=False):
    history_prompt = ""

    ### v0.6 - Natural language format, but with player-agnostic perspective for the LLM
    own_coop = 0
    own_defect = 0
    opponent_coop = 0
    opponent_defect = 0
    own_total_payoff = 0
    opponent_total_payoff = 0
    for i in range(len(own_history)):
        own_coop += 1 if own_history[i] else 0
        own_defect += 1 if not own_history[i] else 0
        opponent_coop += 1 if opponent_history[i] else 0
        opponent_defect += 1 if not opponent_history[i] else 0
        own_payoff = payoff_function(own_history[i], opponent_history[i])
        opponent_payoff = payoff_function(opponent_history[i], own_history[i])
        history_prompt += (
            f"\tRound {i + 1}: A played {to_nat_lang(own_history[i], True)} and B played {to_nat_lang(opponent_history[i], True)}. "
            f"A collected {own_payoff} points and B collected {opponent_payoff} points.\n")
        own_total_payoff += own_payoff
        opponent_total_payoff += opponent_payoff
    history_prompt += (f'\tIn total, A chose "Cooperate" {own_coop} times and chose "Defect" {own_defect} times, '
                       f'B chose "Cooperate" {opponent_coop} times and chose "Defect" {opponent_defect} times.\n')
    history_prompt += f"\tIn total, A collected {own_total_payoff} points and B collected {opponent_total_payoff} points.\n"
    if not is_ended:
        history_prompt += f"\tCurrent round: {len(own_history) + 1}.\n"
    else:
        history_prompt += f"\tThe game has ended.\n"

    return history_prompt
                if "def generate_history_prompt(" in line.strip():
                    outfile.write(line)
                    copy = True
                elif "return history_prompt" in line.strip():
