def generate_history_prompt(own_history, opponent_history, payoff_function, is_ended=False):
    history_prompt = ""

    ### v0.4 - Pass the action and payoff histories as lists
    own_history_nat_lang = [to_nat_lang(action) for action in own_history]
    opponent_history_nat_lang = [to_nat_lang(action) for action in opponent_history]
    own_payoff_history = [payoff_function(own_history[i], opponent_history[i]) for i in range(len(own_history))]
    opponent_payoff_history = [payoff_function(opponent_history[i], own_history[i]) for i in range(len(own_history))]
    history_prompt += f"\tIn the last {len(own_history)} rounds, player A played {own_history_nat_lang}\nplayer B played {opponent_history_nat_lang}.\n"
    own_coop = own_history.count(1)
    own_defect = own_history.count(0)
    opponent_coop = opponent_history.count(1)
    opponent_defect = opponent_history.count(0)
    history_prompt += (f'\tIn total, you chose "Cooperate" {own_coop} times and chose "Defect" {own_defect} times, '
                       f'your opponent chose "Cooperate" {opponent_coop} times and chose "Defect" {opponent_defect} times.\n')
    own_total_payoff = sum(own_payoff_history)
    opponent_total_payoff = sum(opponent_payoff_history)
    history_prompt += f"\tIn total, you collected {own_total_payoff} points and your opponent collected {opponent_total_payoff} points.\n"
    if not is_ended:
        history_prompt += f"\tCurrent round: {len(own_history) + 1}.\n"
    else:
        history_prompt += f"\tThe game has ended.\n"

    return history_prompt
                if "def generate_history_prompt(" in line.strip():
                    outfile.write(line)
                    copy = True
                elif "return history_prompt" in line.strip():
